// R√®gles Firestore s√©curis√©es pour TeamUp
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // üîí R√àGLES S√âCURIS√âES POUR LA PRODUCTION
    
    // Collection users : Lecture autoris√©e pour son propre profil, √©criture via API
    // TEMPORAIRE : permet la lecture client en fallback si API √©choue
    match /users/{userId} {
      // Permettre la lecture si l'utilisateur lit son propre profil
      allow read: if request.auth != null && request.auth.uid == userId;
      // Permettre la cr√©ation de profil si inexistant (fallback)
      allow create: if request.auth != null && request.auth.uid == userId;
      // √âcriture via Admin SDK (API routes) principalement
      allow update: if false;
    }
    
    // Collection events : Lecture publique, √©criture authentifi√©e via API
    match /events/{eventId} {
      // Lecture publique des √©v√©nements (pour la d√©couverte)
      allow read: if true;
      // √âcriture uniquement via Admin SDK (API routes)
      allow write: if false;
    }
    
    // Collection userEvents : Gestion des participations via API uniquement
    match /userEvents/{userEventId} {
      allow read, write: if false;
    }
    
    // Collection messages : Acc√®s via API routes uniquement
    match /messages/{messageId} {
      allow read, write: if false;
    }
    
    // Collection temporaire pour tests (√† supprimer en production)
    match /test/{testId} {
      allow read, write: if request.auth != null;
    }
    
    // R√®gle par d√©faut : interdire tout acc√®s direct
    // Toutes les op√©rations passent par l'Admin SDK via les API routes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}